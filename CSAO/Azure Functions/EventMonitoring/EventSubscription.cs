// Default URL for triggering event grid function in the local environment.
// http://localhost:7071/runtime/webhooks/EventGrid?functionName={functionname}
using Microsoft.Azure.EventGrid.Models;
using Microsoft.Azure.Services.AppAuthentication;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.EventGrid;
using Microsoft.Extensions.Logging;
using Microsoft.WindowsAzure.Storage.Auth;
using Microsoft.WindowsAzure.Storage.Blob;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Utilities;

namespace EventMonitoring
{
    /// <summary>
    /// This is the heart of Guardrails. Any event generated by the PaaS service is sent to Azure Event grid. The events from the Event Grid are extracted by this class and based on the event, it calls the respective function app which will perform the remediation.
    /// </summary>
    public static class EventSubscription
    {
        [FunctionName("EventSubscription")]
        public static async System.Threading.Tasks.Task RunAsync([EventGridTrigger] EventGridEvent eventGridEvent, ILogger log)
        {
            
            string ruleId = "GenericError";
            string serviceType = string.Empty;
            string resourceURI = string.Empty;
            string operationName = string.Empty;

            try
            {
                log.LogInformation("Data received as -" + eventGridEvent.Data.ToString());
                dynamic eventDataObject = JsonConvert.DeserializeObject(eventGridEvent.Data.ToString());
                serviceType = eventDataObject.resourceProvider.ToString();
                resourceURI = eventDataObject.resourceUri.ToString();
                operationName = eventDataObject.operationName.ToString();
                string result;
                string userId = string.Empty;
                string principalType = string.Empty;
                string ownerEmailIds = string.Empty;
                string objectId = string.Empty;
                FunctionDetails functionData;
                log.LogInformation("!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                log.LogInformation(operationName);
                //Get values from App configuration
                string msiAppId = System.Environment.GetEnvironmentVariable("AppId", EnvironmentVariableTarget.Process);

                string storageAccount = System.Environment.GetEnvironmentVariable("StorageAccountName", EnvironmentVariableTarget.Process);
                string envFileName = System.Environment.GetEnvironmentVariable("EnvVariableFileName", EnvironmentVariableTarget.Process);//(EnvConfig.json)-(tagName : guardrails)
                var azureServiceTokenProvider = new AzureServiceTokenProvider($"RunAs=App;AppId={msiAppId}");
                string mgmtAccessToken = await azureServiceTokenProvider.GetAccessTokenAsync("https://management.azure.com/");
                string storageAccessToken = await azureServiceTokenProvider.GetAccessTokenAsync("https://storage.azure.com/");

                string graphAccessToken = string.Empty;
                if (eventDataObject.authorization != null && eventDataObject.authorization.evidence != null && eventDataObject.authorization.evidence.principalType != null)
                {
                    principalType = eventDataObject.authorization.evidence.principalType.ToString();
                }
                else
                {
                    principalType = string.Empty;
                }


                JObject APIVersionObject = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "APIVersionConfig.json", log);

                string tenantId = eventDataObject.tenantId.ToString();
                string graphtoken = await azureServiceTokenProvider.GetAccessTokenAsync("https://graph.windows.net/");
                if (!string.IsNullOrEmpty(principalType))
                {
                    if (principalType.Equals("ServicePrincipal"))
                    {
                        using (var httpClient = new HttpClient())
                        {
                            string appId = eventDataObject.claims.appid.ToString();
                            httpClient.DefaultRequestHeaders.Accept.Clear();
                            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", graphtoken);
                            string url = $"https://graph.windows.net/{tenantId}/applications?$filter=appId eq '{appId}'&api-version={APIVersionObject["api-versions"]["graph.windows.net"].ToString()}";
                            log.LogInformation("Calling the Graph api to get the application details, url - " + url);
                            HttpResponseMessage response = await httpClient.GetAsync(url);
                            result = string.Empty;
                            try
                            {
                                result = await response.Content.ReadAsStringAsync();
                                response.EnsureSuccessStatusCode();
                                dynamic applicationDetails = JsonConvert.DeserializeObject(result);
                                log.LogInformation("Response received from Graph API");
                                if (applicationDetails.value != null && applicationDetails.value.Count > 0)
                                {
                                    principalType = "Application:" + applicationDetails.value[0].displayName.ToString();
                                    objectId = applicationDetails.value[0].objectId.ToString();
                                }
                            }
                            catch (Exception ex)
                            {
                                log.LogInformation("Failed to get the application details. Error details " + ex);
                            }

                            if (principalType.Equals("ServicePrincipal"))
                            {
                                url = $"https://graph.windows.net/{tenantId}/servicePrincipals?$filter=servicePrincipalNames/any(c:c eq '{appId}')&api-version={APIVersionObject["api-versions"]["graph.windows.net"].ToString()}";
                                log.LogInformation("Calling the Graph api to get the Service principal details, url - " + url);
                                response = await httpClient.GetAsync(url);
                                result = string.Empty;
                                try
                                {
                                    result = await response.Content.ReadAsStringAsync();
                                    response.EnsureSuccessStatusCode();
                                    dynamic spnDetails = JsonConvert.DeserializeObject(result);
                                    log.LogInformation("Received response from Graph API for service principal");
                                    if (spnDetails.value != null && spnDetails.value.Count > 0)
                                    {
                                        principalType = "ServicePrincipal:" + spnDetails.value[0].displayName.ToString();
                                        objectId = spnDetails.value[0].objectId.ToString();
                                    }
                                }
                                catch (Exception ex)
                                {
                                    log.LogInformation("Failed to get the service principal details. Error details " + ex);
                                }
                            }

                            if (!string.IsNullOrEmpty(objectId))
                            {
                                if (principalType.Contains("Application:"))
                                {
                                    url = $"https://graph.windows.net/{tenantId}/applications/{objectId}/owners?api-version={APIVersionObject["api-versions"]["graph.windows.net"].ToString()}";
                                }
                                else
                                {
                                    url = $"https://graph.windows.net/{tenantId}/servicePrincipals/{objectId}/owners?api-version={APIVersionObject["api-versions"]["graph.windows.net"].ToString()}";
                                }
                                log.LogInformation("Calling the Graph api to get the owners details, url - " + url);
                                response = await httpClient.GetAsync(url);
                                result = string.Empty;
                                try
                                {
                                    result = await response.Content.ReadAsStringAsync();
                                    response.EnsureSuccessStatusCode();
                                    dynamic owners = JsonConvert.DeserializeObject(result);
                                    log.LogInformation("Response from Graph API for owners is - " + result);
                                    if (owners.value != null && owners.value.Count > 0)
                                    {
                                        foreach (var owner in owners.value)
                                        {
                                            if (owner.mail != null)
                                            {
                                                if (!string.IsNullOrEmpty(userId))
                                                {
                                                    userId += ";";
                                                }

                                                userId += owner.mail.ToString();
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    log.LogInformation("Failed to get the owners details. Error details " + ex);
                                }
                            }
                        }
                    }
                    else
                    {
                        JObject eventObject = JObject.Parse(eventGridEvent.Data.ToString());
                        if (eventObject["claims"] != null)
                        {
                            if (eventObject["claims"]["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"] != null)
                            {
                                userId = eventObject["claims"]["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"].ToString();
                            }
                            else if (eventObject["claims"]["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn"] != null)
                            {
                                string emailAddress = eventObject["claims"]["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn"].ToString();
                                if (RegexUtilities.IsValidEmail(emailAddress))
                                {
                                    userId = emailAddress;
                                }
                            }
                        }
                    }
                }

                log.LogInformation($"Service principal type is {principalType} and user Id is {userId}");
                //Get the function name and key for remediation log function
                FunctionDetails logFunctionData = await GetFunctionAppConfig("RemediationLog", storageAccessToken, log);
                JObject eventDetails = new JObject();
                eventDetails["mgmtAccessToken"] = mgmtAccessToken;
                eventDetails["storageAccessToken"] = storageAccessToken;
                eventDetails["graphAccessToken"] = graphAccessToken;
                eventDetails["principalType"] = principalType;
                eventDetails["userId"] = userId;
                eventDetails["storageAccountURI"] = $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles";
                eventDetails["StorageAccountOperationalURI"] = $"https://{storageAccount}.blob.core.windows.net/operationalconfigfiles";
                eventDetails["logFunctionURL"] = $"https://{logFunctionData.FunctionAppName}.azurewebsites.net/api/LogData?code={logFunctionData.FunctionAppKey}";
                eventDetails["eventData"] = eventDataObject;
                eventDetails["envFileName"] = envFileName;
                eventDetails["subscriptionId"] = eventDataObject.subscriptionId.ToString();
                eventDetails["updateSecurityContact"] = "false";
                eventDetails["updateMMAProvisioning"] = "false";
                eventDetails["updatePricingTier"] = "false";
                eventDetails["envConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", envFileName, log);
                eventDetails["APIVersionObject"] = APIVersionObject;
                try
                {
                    TagDeleteAlert.GetServiceData(resourceURI, log, eventDetails["envConfig"].ToObject<JObject>(), eventDetails["APIVersionObject"].ToObject<JObject>(), eventDetails["mgmtAccessToken"].ToString(), operationName);
                }
                catch (Exception ex)
                {
                    log.LogInformation("Failed to process the resource change data by calling Tag Delete alert utility. Exception Details are - " + ex);
                }


                #region Diagnositc Log

                //Verify if the service belongs to the list of in scope services for diagnosticlogs remediation.
                JObject diagnosticConfigData = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "DiagnosticLogs.json", log);

                foreach (string serviceName in diagnosticConfigData["serviceInScope"])
                {
                    ruleId = "R004";
                    bool isDiagnostic = false;
                    string[] svcname = serviceName.Split(new Char[] { '/' });
                    string resourcenamestr = eventDataObject.resourceUri.ToString();
                    string[] resourceIDarraynew = resourcenamestr.Split(new Char[] { '/' });
                    if (resourceIDarraynew[resourceIDarraynew.Length - 2].Equals("diagnosticSettings"))
                    {
                        if (resourceIDarraynew[resourceIDarraynew.Length - 6].ToLower().Equals(svcname[svcname.Length - 1].ToLower()))
                        {
                            isDiagnostic = true;
                        }
                    }
                    else if (eventDataObject.operationName.ToString().ToLower().Equals(serviceName.ToString() + "/write") || eventDataObject.operationName.ToString().ToLower().Equals(serviceName.ToString() + "/delete"))
                    {
                        isDiagnostic = true;
                    }

                    if (isDiagnostic)
                    {
                        using (var httpClient = new HttpClient())
                        {
                            string[] resourceArray = resourceURI.ToLower().Split("/");
                            // Check to get whether the diagnostics if for azure subscription or azure resource
                            if (resourceArray.Length == 7 && resourceArray[1] == "subscriptions" && resourceArray[3] == "providers" && resourceArray[4] == "microsoft.insights")
                            {
                                eventDetails["diagnosticsConfig"] = diagnosticConfigData;
                                log.LogInformation("Subscription diagnostic event occured");
                                functionData = await GetFunctionAppConfig("SubscriptionMonitor", storageAccessToken, log);
                                string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/SubscriptionAPITrigger?code={functionData.FunctionAppKey}";
                                log.LogInformation("Calling the Function App to remediate diagnostic settings for subscription, App Name - " + functionData.FunctionAppName);
                                StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                                HttpResponseMessage response = await httpClient.PostAsync(url, content);
                                result = string.Empty;
                                try
                                {
                                    result = await response.Content.ReadAsStringAsync();
                                    response.EnsureSuccessStatusCode();
                                }
                                catch (Exception ex)
                                {
                                    log.LogError("Remediation Error:: Failed to trigger the Diagnostic setting for subscription function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                                }
                            }
                            else
                            {
                                eventDetails["diagnosticsConfig"] = diagnosticConfigData;
                                eventDetails["VMDiagnosticsConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "VMDiagnosticLogs.json", log);
                                functionData = await GetFunctionAppConfig("Diagnostics", storageAccessToken, log);
                                string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/DiagnosticLogsTrigger?code={functionData.FunctionAppKey}";
                                log.LogInformation("Calling the Function App to remediate diagnostic settings, App Name - " + functionData.FunctionAppName);
                                StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                                HttpResponseMessage response = await httpClient.PostAsync(url, content);
                                result = string.Empty;
                                try
                                {
                                    result = await response.Content.ReadAsStringAsync();
                                    response.EnsureSuccessStatusCode();
                                }
                                catch (Exception ex)
                                {
                                    log.LogError("Remediation Error:: Failed to trigger the Diagnostic setting function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                                }
                            }

                            log.LogInformation($"Received response from {serviceName} diagnositc function");
                        }
                    }
                }

                #endregion

                #region Event Filtering

                // Condition to check whether the operation if of Security Contact Update
                if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.security/securitycontacts/write"))
                {
                    ruleId = "R009,R023,R024";
                    eventDetails["updateSecurityContact"] = true;
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("SecurityCenter", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/SecurityCenterConfig?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to update the security data, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Security contact details function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Security Contact udpate Function App - " + functionData.FunctionAppName);
                    }
                }
                // Condition to check whether the operation if of MMA Provisioning switch
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.security/autoprovisioningsettings/write") || eventDataObject.operationName.ToString().ToLower().Equals("microsoft.security/workspacesettings/write") || eventDataObject.operationName.ToString().ToLower().Equals("microsoft.security/workspacesettings/delete"))
                {
                    ruleId = "R007";
                    eventDetails["updateMMAProvisioning"] = true;
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("SecurityCenter", storageAccessToken, log);
                        log.LogInformation(functionData.FunctionAppName, functionData.FunctionAppKey);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/SecurityCenterConfig?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to update the MMA provisioning data, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the MMA provisioning function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Response from MMA provisioning Function App - " + result);
                    }
                }
                // Condition to check whether the operation if of Pricing Tier update
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.security/pricings/write"))
                {
                    ruleId = "R008";
                    eventDetails["updatePricingTier"] = true;
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("SecurityCenter", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/SecurityCenterConfig?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to update the pricing tier, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Security pricing tier function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Pricing tier Function App - " + functionData.FunctionAppName);
                    }
                }
                // Condition to check whether the operation if of Storage/Blob container/File Service write
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.storage/storageaccounts/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.storage/storageaccounts/blobservices/containers/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.storage/storageaccounts/fileservices/write")||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.security/advancedthreatprotectionsettings/write"))
                {
                    
                    log.LogInformation(storageAccount);
                    eventDetails["storageAccountConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "StorageAccountConfig.json", log);
                    eventDetails["dataLakeGen2Config"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "DataLakeGen2Config.json", log);
                    ruleId = "R001,R013,R016,R026,R044,R003,R012,R046,R047";
                    using (var httpClient = new HttpClient())
                    {
                        httpClient.DefaultRequestHeaders.Accept.Clear();
                        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", mgmtAccessToken);
                        string listKeyURL = resourceURI;
                        if (resourceURI.Contains("/blobServices"))
                        {
                            listKeyURL = resourceURI.Substring(0, resourceURI.IndexOf("/blobServices"));
                        }
                        else if ((resourceURI.Contains("/fileServices")))
                        {
                            listKeyURL = resourceURI.Substring(0, resourceURI.IndexOf("/fileServices"));
                        }
                        else if((resourceURI.Contains("/advancedThreatProtectionSettings")))
                        {
                            listKeyURL = resourceURI.Substring(0, resourceURI.IndexOf("/providers/Microsoft.Security"));
                            eventDetails["eventData"]["resourceUri"] = listKeyURL;
                        }
                        
                        JArray deletedLocks = await ProcessManagementLock.DeleteLocks(mgmtAccessToken, listKeyURL, APIVersionObject["api-versions"]["microsoft.authorization/locks"].ToString(), log);
                        string url = $"https://management.azure.com{listKeyURL}/listKeys?api-version={APIVersionObject["api-versions"]["microsoft.storage/storageaccounts/listkeys"].ToString()}";
                        log.LogInformation($"The URL to get the keys is  {url}");
                        HttpResponseMessage response = await httpClient.PostAsync(url, null);
                        await ProcessManagementLock.CreateLocks(deletedLocks, mgmtAccessToken, listKeyURL, APIVersionObject["api-versions"]["microsoft.authorization/locks"].ToString(), log);
                        result = string.Empty;
                        JObject keyList = null;
                        bool isSelectedHttpError = false;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                            keyList = JObject.Parse(result);
                            eventDetails["storageAccountKey"] = keyList;
                        }
                        catch (Exception ex)
                        {
                            log.LogInformation("Failed to fetch the Key for the Target Storage Account. Response details - " + result);
                            if (response.StatusCode != HttpStatusCode.NotFound && response.StatusCode != HttpStatusCode.TooManyRequests)
                            {
                                throw ex;
                            }
                            else if (response.StatusCode == HttpStatusCode.TooManyRequests)
                            {
                                log.LogInformation("The request to get storage keys returned an error code of 429 (TooManyRequests). Details are, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                                isSelectedHttpError = true;
                            }
                            else
                            {
                                log.LogInformation("The request to get storage keys returned an error code of 404 (NotFound). Details are, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                                isSelectedHttpError = true;
                            }
                        }
                        if (!isSelectedHttpError)
                        {
                            httpClient.DefaultRequestHeaders.Accept.Clear();
                            functionData = await GetFunctionAppConfig("Storage", storageAccessToken, log);
                            log.LogInformation(functionData.FunctionAppKey);
                            log.LogInformation(functionData.FunctionAppName);
                            url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/StorageMonitorTrigger?code={functionData.FunctionAppKey}";
                            log.LogInformation("Calling the Function App to update the storage account configuration with App Name - " + functionData.FunctionAppName);
                            var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                            response = await httpClient.PostAsync(url, content);
                            result = string.Empty;
                            try
                            {
                                result = await response.Content.ReadAsStringAsync();
                                response.EnsureSuccessStatusCode();
                            }
                            catch (Exception ex)
                            {
                                log.LogError("Remediation Error:: Failed to trigger the Storage account function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                            }

                            log.LogInformation("Received response from Storage account Policy Function App - " + functionData.FunctionAppName);
                        }
                    }
                }
                // Condition to check whether the operation is of Network component
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/networksecuritygroups/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/networksecuritygroups/securityrules/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/virtualnetworks/subnets/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/virtualnetworks/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/loadbalancers/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/loadbalancers/delete") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/networkinterfaces/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.insights/extendeddiagnosticsettings/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.insights/extendeddiagnosticsettings/delete"))
                {
                    eventDetails["LBPublicIPConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "LBPublicIPConfig.json", log);
                    eventDetails["VMNICConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "VMNICConfig.json", log);
                    eventDetails["NSGPortsConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "NSGPortsConfig.json", log);
                    eventDetails["VnetServiceEndpointsConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "VnetServiceEndpointsConfig.json", log);
                    ruleId = "R006,R017,R029,R020";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("Network", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/NetworkMonitor?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to monitor network details, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Network monitroing function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Network Monitoring durable function is - " + functionData.FunctionAppName);
                    }
                }
                // Condition to check whether the operation is of Application service (Web/Function Application)
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.web/sites/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.web/sites/config/write"))
                {
                    eventDetails["appServiceConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "AppServiceConfig.json", log);
                    ruleId = "R001,R026,R003,R040,R041,R042";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("AppService", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/AppServiceTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to monitor app service details, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the app service function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from App service Monitoring durable function is - " + functionData.FunctionAppName);
                    }
                }
                // Condition to check whether the operation is of Cosmos DB service 
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.documentdb/databaseaccounts/write"))
                {
                    eventDetails["cosmosDBConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "CosmosDBConfig.json", log);
                    ruleId = "R016,R003,R002";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("Cosmos", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/CosmosDBTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to monitor cosmos db, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Cosmos DB function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Cosmos DB Monitoring durable function is - " + functionData.FunctionAppName);
                    }
                }
                // Condition to check whether the operation is of SQL Server/Database
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/databases/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/virtualnetworkrules/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/firewallrules/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/securityalertpolicies/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/administrators/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/databases/transparentdataencryption/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/databases/backupshorttermretentionpolicies/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/databases/backuplongtermretentionpolicies/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/auditingsettings/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/servers/databases/auditingsettings/write"))
                {
                    eventDetails["diagnosticLogs"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "DiagnosticLogs.json", log);
                    eventDetails["SQLConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "SQLConfig.json", log);
                    ruleId = "R016,R003,R010,R011,R002,R039,R026";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("SQLServer", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/SQLDBTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to monitor SQL database, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the SQL databse function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from sql database Monitoring durable function is - " + functionData.FunctionAppName);
                    }
                }
                // Condition to check whether the operation is of Postgre DB
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbforpostgresql/servers/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbforpostgresql/servers/databases/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbforpostgresql/servers/firewallrules/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbforpostgresql/servers/virtualnetworkrules/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbforpostgresql/servers/virtualnetworkrules/delete") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbforpostgresql/servers/administrators/write"))
                {
                    eventDetails["postgreSQLConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "PostgreSQLConfig.json", log);
                    ruleId = "R016,R003,R010,R002,R048,R026";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("PostgreSQL", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/PostgreDBTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to monitor Postgre database, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the PostgreSQL function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Postgre database Monitoring durable function is - " + functionData.FunctionAppName);
                    }
                }
                // Condition to check whether the operation is of Event Hub namespace
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.eventhub/namespaces/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.eventhub/namespaces/eventhubs/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.eventhub/namespaces/networkrulesets/write"))
                {
                    eventDetails["eventHubConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "EventHubConfig.json", log);
                    ruleId = "R044,R003";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("EventHub", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/EventHubTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to monitor Event Hub namespace, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Event hub function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Event Hub namespace Monitoring durable function is - " + functionData.FunctionAppName);
                    }
                }
                // Condition to check whether the operation is of Key Vault write
                else if ((eventDataObject.operationName.ToString().ToLower().Equals("microsoft.keyvault/vaults/write")) || (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.keyvault/vaults/delete")))
                {
                    eventDetails["keyVaultConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "KeyVaultConfig.json", log);
                    ruleId = "R044,R003,R013,R016";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("KeyVault", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/KeyVaultTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to monitor Key vault, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Key Vault function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Key vault Monitoring durable function is - " + functionData.FunctionAppName);
                    }
                }
                // Condition to check whether the operation is of MySQL server
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbformysql/servers/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbformysql/servers/firewallrules/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbformysql/servers/virtualnetworkrules/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbformysql/servers/virtualnetworkrules/delete") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbformysql/servers/administrators/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbformysql/servers/configurations/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.dbformysql/servers/updateconfigurations/action"))
                {
                    eventDetails["diagnosticLogs"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "DiagnosticLogs.json", log);
                    eventDetails["MySQLConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "MySQLConfig.json", log);
                    ruleId = "R016,R003,R010,R002,R039,R048,R026";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("MySQL", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/MySQLTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to monitor MySQL, App Name - " + functionData.FunctionAppName);
                        var content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the MySQL DB function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from MySQL Monitoring durable function is - " + functionData.FunctionAppName);
                    }
                }
                //Condition to check whether the operation is of Virtual Machines or Virtual Machine Extensions.
                else if ((eventDataObject.operationName.ToString().ToLower().Equals("microsoft.compute/virtualmachines/write")) || (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.compute/virtualmachines/extensions/delete")) || (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.compute/virtualmachines/extensions/write")) || (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.compute/virtualmachinescalesets/write")) || (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.compute/virtualmachinescalesets/extensions/delete")) || (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.compute/virtualmachinescalesets/extensions/write")))
                {
                    ruleId = "R022,R021";
                    using (var httpClient = new HttpClient())
                    {
                        eventDetails["diagnosticsConfig"] = diagnosticConfigData;
                        eventDetails["VMDiagnosticsConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "VMDiagnosticLogs.json", log);
                        functionData = await GetFunctionAppConfig("Diagnostics", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/DiagnosticLogsTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to remediate diagnostic settings, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the VM/VMSS diagnostic function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Virtual Machine/VMSS diagnositc function is - " + functionData.FunctionAppName);
                    }
                }
                //Check if the event belongs to Application Gateway
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/applicationgateways/write"))
                {
                    eventDetails["appGatewayConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "AppGatewayConfig.json", log);
                    ruleId = "R001";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("AppGateway", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/AppGatewayTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to remediate App Gateway, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the App Gateway function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from App Gateway function is - " + functionData.FunctionAppName);
                    }
                }
                //Check if the event belongs to Data lake gen 1
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.datalakestore/accounts/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.datalakestore/accounts/firewallrules/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.datalakestore/accounts/virtualnetworkrules/write"))
                {
                    eventDetails["dataLakeGen1Config"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "DataLakeGen1Config.json", log);
                    ruleId = "R016,R003,R044";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("DataLakeGen1", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/DataLakeTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to remediate data lake gen 1, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Data Lake Gen 1 function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from data lake gen 1 function is - " + functionData.FunctionAppName);
                    }
                }
                //Check if the event belongs to Logic App workflows
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.logic/workflows/write"))
                {
                    eventDetails["logicAppConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "LogicAppConfig.json", log);
                    ruleId = "R003";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("LogicApp", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/LogicAppTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to remediate logic app, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Logic App function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from logic app function is - " + functionData.FunctionAppName);
                    }
                }
                //Check if the event belongs to API management service
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.apimanagement/service/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.apimanagement/service/delete") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.apimanagement/service/apis/write"))
                {
                    eventDetails["APIManagementConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "APIManagementConfig.json", log);
                    ruleId = "R027,R001,R002";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("APIManagement", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/APIManagementTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to remediate API management, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the API Management function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from API management function is - " + functionData.FunctionAppName);
                    }
                }
                //Check if the event belongs to Container Registry
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.containerregistry/registries/write"))
                {
                    eventDetails["containerRegistryConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "ContainerRegistryConfig.json", log);
                    ruleId = "R003";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("ContainerRegistry", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/ContainerRegistryTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to remediate container registry, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Container registry function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Container Registry function is - " + functionData.FunctionAppName);
                    }
                }
                //Check if the event belongs to Private DNS zone.
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/privatednszones/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.network/privatednszones/virtualnetworklinks/write"))
                {
                    eventDetails["DNSZonesConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "DNSZonesConfig.json", log);
                    ruleId = "R037";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("DNSZones", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/DNSZonesTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to private dns zones, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the DNS Zones function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from DNS Zones function is - " + functionData.FunctionAppName);
                    }
                }
                //Check if the event belongs to SQL Managed Instance service
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/managedinstances/databases/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/managedinstances/databases/backupshorttermretentionpolicies/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/managedinstances/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/managedinstances/securityalertpolicies/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/managedinstances/vulnerabilityassessments/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/managedinstances/securityalertpolicies/delete") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/managedinstances/vulnerabilityassessments/delete") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/managedinstances/administrators/write") ||
                    eventDataObject.operationName.ToString().ToLower().Equals("microsoft.sql/managedinstances/databases/transparentdataencryption/write"))
                {
                    eventDetails["SQLManagedInstanceConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "SQLManagedInstanceConfig.json", log);
                    ruleId = "R034,R035";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("SQLManagedInstance", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/SQLManagedInstanceTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to remediate SQLManagedInstance, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the SQLManagedInstance function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from SQLManagedInstance function is - " + functionData.FunctionAppName);
                    }
                }
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.analysisservices/servers/write"))
                {
                    eventDetails["analysisServiceConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "AnalysisServiceConfig.json", log);
                    ruleId = "R031,R036,R003";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("AnalysisServices", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/AnalysisServicesTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to remediate Analysis Services, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Analysis Services function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Analysis Services function is - " + functionData.FunctionAppName);
                    }
                }
                else if (eventDataObject.operationName.ToString().ToLower().Equals("microsoft.containerservice/managedclusters/write") ||
                        eventDataObject.operationName.ToString().ToLower().Equals("microsoft.containerservice/managedclusters/agentpools/write"))
                {
                    eventDetails["kubernetesConfig"] = await StorageAccountUtility.GetBlob(storageAccessToken, $"https://{storageAccount}.blob.core.windows.net/jsonconfigfiles", "KubernetesConfig.json", log);
                    ruleId = "R038";
                    using (var httpClient = new HttpClient())
                    {
                        functionData = await GetFunctionAppConfig("KubernetesService", storageAccessToken, log);
                        string url = $"https://{functionData.FunctionAppName}.azurewebsites.net/api/KubernetesServiceTrigger?code={functionData.FunctionAppKey}";
                        log.LogInformation("Calling the Function App to remediate Kubernetes Service, App Name - " + functionData.FunctionAppName);
                        StringContent content = new StringContent(JsonConvert.SerializeObject(eventDetails), Encoding.UTF8, "application/json");
                        HttpResponseMessage response = await httpClient.PostAsync(url, content);
                        result = string.Empty;
                        try
                        {
                            result = await response.Content.ReadAsStringAsync();
                            response.EnsureSuccessStatusCode();
                        }
                        catch (Exception ex)
                        {
                            log.LogError("Remediation Error:: Failed to trigger the Kubernetes Service function app. Following is the resource details, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
                        }

                        log.LogInformation("Received response from Analysis Services function is - " + functionData.FunctionAppName);
                    }
                }

                #endregion
            }
            catch (Exception ex)
            {
                log.LogError("Remediation Error:: Failed to process the event. Following is the resource details, ControlId, Rule Id={ruleId}  Service Type={serviceType}, Resource URI={resourceURI}, Operation Name={operationName}. Exception details={exceptionData}", ruleId, serviceType, resourceURI, operationName, ex);
            }
        }

        public static async Task<FunctionDetails> GetFunctionAppConfig(string functionId, string storageToken, ILogger log)
        {
            try
            {
                FunctionDetails functionData = new FunctionDetails();

                string storageAccount = System.Environment.GetEnvironmentVariable("StorageAccountName", EnvironmentVariableTarget.Process);
                JObject functionAppConfig = await StorageAccountUtility.GetBlob(storageToken, $"https://{storageAccount}.blob.core.windows.net/operationalconfigfiles", "FunctionAppConfig.json", log);
                foreach (var functionApp in functionAppConfig["functionApps"])
                {
                    if (functionApp["id"].ToString().Equals(functionId))
                    {
                        functionData.FunctionAppKey = functionApp["functionKey"].ToString();
                        functionData.FunctionAppName = functionApp["name"].ToString();
                        break;
                    }
                }

                if (functionData == null)
                {
                    throw new Exception("Could not find Function App key within Json Config, for function name - " + functionId);
                }

                return functionData;
            }
            catch (Exception exception)
            {
                throw exception;
            }
        }
    }
}